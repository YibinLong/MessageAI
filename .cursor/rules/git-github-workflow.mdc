---
description: Git and GitHub CLI workflow rules for WhatsApp Clone project
alwaysApply: true
---

# Git & GitHub CLI Workflow Rules

# üö® IMPORTANT: ASK USER IF THEY MERGED ANY PRs! üö®
**Before starting ANY new task, always ask the user:**
"Have you merged any PRs? If so, let me know so I can switch back to main and pull the latest changes."

When user confirms they merged a PR:
1. Run: `git checkout main`
2. Run: `git pull origin main`
3. Confirm: "‚úÖ Switched to main and pulled latest changes. Ready for next task!"

## ‚úÖ ALLOWED Operations:
- Create commits with clear, descriptive messages
- Create feature branches (use naming convention: `feature/<task-name>`)
- Push branches to remote
- Create pull requests using `gh pr create`
- Add commit messages following conventional commits format when appropriate
- Stage files for commits

## ‚ùå PROHIBITED Operations:
- **NEVER merge pull requests** - Only the user (YibinLong) can merge PRs manually
- **NEVER force push** (`git push --force` or `git push -f`)
- **NEVER delete branches** without explicit user permission
- **NEVER rewrite history** on main/master branch (no hard reset, rebase on main)
- **NEVER skip hooks** (--no-verify, --no-gpg-sign)
- **NEVER push directly to main/master** - Always use feature branches

## Git Best Practices:
1. Always create a feature branch for new work
2. Use clear commit messages that explain WHAT and WHY
3. Create PRs with detailed descriptions
4. Reference task numbers from TASK_LIST.md in commits/PRs
5. Keep commits atomic and focused on single tasks

## Branch Naming Convention:
- Feature: `feature/<task-description>`
- Bugfix: `bugfix/<issue-description>`
- Hotfix: `hotfix/<critical-fix>`
- Example: `feature/firebase-setup`, `feature/chat-ui`

## Automated Branch Workflow (GitHub Desktop Style):

### The Goal: User sees their changes at ALL times, minimal disruption

### Step-by-Step Workflow:
1. **User works on main branch** - makes changes, sees everything immediately
2. **When ready to commit (user or AI decides)**:
   - AI creates feature branch WITH current changes: `git checkout -b feature/xyz`
   - All files still visible (nothing disappears!)
   - AI commits changes
   - AI pushes feature branch
   - AI creates PR
   - **AI LEAVES user ON the feature branch** ‚Üê KEY!
3. **User stays on feature branch** - continues seeing all changes
   - Can keep working and add more commits to same PR if needed
   - Changes remain visible at all times
4. **User merges PR on GitHub** (manually, as per rules)
5. **User tells AI "I merged the PR" or "merged" or starts new task**:
   - AI automatically runs: `git checkout main && git pull origin main`
   - User now on main with all merged changes
   - Ready to start next feature (repeat from step 1)

### Critical Rules:
- ‚ùå **DO NOT** automatically switch user back to main after creating PR
- ‚ùå **DO NOT** switch branches without user knowing
- ‚úÖ **DO** keep user on feature branch until they confirm PR is merged
- ‚úÖ **DO** ask if PR is merged before starting new work
- ‚úÖ **DO** automatically switch to main + pull when user confirms merge

### Why This Works:
- User sees changes continuously (main ‚Üí feature branch ‚Üí main)
- Only ONE moment of switching: after merge, back to main
- User can keep working on feature branch even after PR created
- Matches familiar GitHub Desktop workflow

## Commit Message Format:
**ALWAYS use Conventional Commits format:**

```
<type>: <short summary in lowercase>

<optional longer description>

Related to: Task X.X.X from TASK_LIST.md
```

### Commit Type Prefixes (REQUIRED):
- `feat:` - New feature
- `fix:` - Bug fix
- `docs:` - Documentation changes
- `style:` - Code style/formatting (no logic change)
- `refactor:` - Code refactoring
- `test:` - Adding or updating tests
- `chore:` - Maintenance tasks, dependencies, config

### Commit Message Rules:
1. **Always start with type prefix** (e.g., `feat:`, `fix:`, `docs:`)
2. **First word after colon should be lowercase** unless it's a proper noun (e.g., Firebase, React, GitHub)
3. Keep summary concise and descriptive
4. Use imperative mood (e.g., "add" not "added", "fix" not "fixed")

### Examples:
- ‚úÖ `feat: add user authentication with Firebase`
- ‚úÖ `docs: update README with setup instructions`
- ‚úÖ `fix: resolve chat message timestamp bug`
- ‚úÖ `refactor: improve Firebase initialization logic`
- ‚úÖ `chore: add ESLint configuration`
- ‚ùå `Add user authentication` (missing type)
- ‚ùå `feat: Add user authentication` (should be lowercase "add")
- ‚ùå `Added authentication` (wrong tense)
