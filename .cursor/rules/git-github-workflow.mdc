---
description: Git and GitHub CLI workflow rules for WhatsApp Clone project
alwaysApply: true
---

# Git & GitHub CLI Workflow Rules

# üö® USER MANAGES ALL GIT OPERATIONS üö®
**The user (YibinLong) handles all git/branch/PR management.**

## AI's Role: Commit Message Advisor ONLY

### What AI Does:
1. **Organize code changes into logical commits**
   - When user has made many changes, suggest how to split them into separate commits
   - Group related changes together (e.g., "all auth files", "all UI updates", "config changes")

2. **Suggest if changes should be in separate PRs**
   - If changes are unrelated or too large, recommend splitting into multiple PRs
   - Example: "This looks like 2 PRs - one for Firebase setup, one for UI components"

3. **Create commits with conventional commit messages**
   - Run `git add` and `git commit` commands
   - Generate proper commit messages for each logical group of changes
   - Follow format: `<type>: <lowercase description>`

4. **Create PRs ONLY when explicitly requested**
   - User must explicitly ask "create a PR" or "make a pull request"
   - Use GitHub CLI (`gh pr create`) to create draft PRs
   - NEVER push code automatically - user reviews first
   - NEVER merge PRs - user does this manually on GitHub.com
   - Always create as draft for user review

### What AI Does NOT Do:
- ‚ùå Create branches (user does this)
- ‚ùå Push code (user does this via GitHub Desktop)
- ‚ùå Create PRs automatically (ONLY when explicitly requested)
- ‚ùå Merge PRs (user ALWAYS does this manually)
- ‚ùå Switch branches (user does this)

## Commit Message Format:
**ALWAYS use Conventional Commits format:**

```
<type>: <short summary in lowercase>

<optional longer description>

Related to: Task X.X.X from TASK_LIST.md
```

### Commit Type Prefixes (REQUIRED):
- `feat:` - New feature
- `fix:` - Bug fix
- `docs:` - Documentation changes
- `style:` - Code style/formatting (no logic change)
- `refactor:` - Code refactoring
- `test:` - Adding or updating tests
- `chore:` - Maintenance tasks, dependencies, config

### Commit Message Rules:
1. **Always start with type prefix** (e.g., `feat:`, `fix:`, `docs:`)
2. **First word after colon MUST be lowercase** - NO EXCEPTIONS
3. Proper nouns can be capitalized (e.g., Firebase, React, GitHub)
4. Keep summary concise and descriptive
5. Use imperative mood (e.g., "add" not "added", "fix" not "fixed")

### Examples:
- ‚úÖ `feat: add user authentication with Firebase`
- ‚úÖ `docs: update README with setup instructions`
- ‚úÖ `fix: resolve chat message timestamp bug`
- ‚úÖ `refactor: improve Firebase initialization logic`
- ‚úÖ `chore: add ESLint configuration`
- ‚ùå `Add user authentication` (missing type)
- ‚ùå `feat: Add user authentication` (capital A - WRONG!)
- ‚ùå `Added authentication` (wrong tense)

## Example Workflow:

**User**: "I made a bunch of changes, help me organize commits"

**AI Response**:
"I see changes in 3 areas. Here's how I'd split them:

**Commit 1** (Firebase setup):
- `firebase.config.js`
- `package.json` (Firebase dependencies)
**Message**: `feat: add Firebase configuration and dependencies`

**Commit 2** (Authentication):
- `src/auth/login.js`
- `src/auth/signup.js`
**Message**: `feat: implement user authentication flow`

**Commit 3** (Documentation):
- `README.md`
**Message**: `docs: add Firebase setup instructions`

**Recommendation**: These can all go in one PR called 'Firebase Authentication Setup'"
